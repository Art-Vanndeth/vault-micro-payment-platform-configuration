spring:
  application:
    name: transaction-service

  #  data:
  #    mongodb:
  #      uri: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DATABASE}?authSource=${MONGO_AUTH_DB}
  data:
    mongodb:
      host: ${MONGO_HOST:localhost}
      port: ${MONGO_PORT:27017}
      database: ${MONGO_DATABASE:payment_audit}
      username: ${MONGO_USERNAME:mongo_user}
      password: ${MONGO_PASSWORD:mongo_password}
      authentication-database: ${MONGO_AUTH_DB:admin}



  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:transaction-service-group}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

kafka:
  topics:
    payment-created-events-topic: ${PAYMENT_CREATED_EVENTS_TOPIC:payment-created-events-topic}
    transaction-created-events-topic: ${TRANSACTION_CREATED_EVENTS_TOPIC:transaction-created-events-topic}
  consumer:
    group-id: ${KAFKA_CONSUMER_GROUP_ID:transaction-service-group}

logging:
  level:
    com.pipay.transaction: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.mongodb: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8887/eureka/}
  instance:
    prefer-ip-address: true

server:
  port: 8092
